// Frequncy: 	DC output if 0
//				AC output @Frequency if >0
// Duty Cycle:  if frequency is 0, 		outputs BAT_POS if >50%
//										outputs BAT_NEG if <-50%
//										OFF otherwise
//				if frequency >0, 		acts as regular duty cycle

when (Current State) {
	is (Idle) {
		when (Gear.Lever) {
			is (Up) {
					Servo PWM.Duty Cycle = UpShift Duty Cycle;
					State Cycles = Num Upshift Cycles;
					Current State = Current State.Shift Up;
			}
			is (Down) {
					Servo PWM.Duty Cycle = DnShift Duty Cycle;
					State Cycles = Num Dnshift Cycles;
					Current State = Current State.Shift Dn;
			}
			is (Idle) {
			/*
				if (Engine.Speed > Preload Up Activation and Gear.Value.AsInteger() >= Gear.Value.Second.AsInteger()) {
					Servo PWM.Duty Cycle = Preload Up Duty Cycle;
					Current State = Current State.Preload Up;
				} else if (Brake.Front Value > Preload Dn Activation and Gear.Value.AsInteger() > Gear.Value.Second.AsInteger()) {
					Servo PWM.Duty Cycle = -100;
					Current State = Current State.Preload Dn;
				}
			*/
			}
			is(Lockout or Not in Use or Hold) {
			
			}
		}
	}
	is (Preload Up) {
		if (Gear.Lever eq Gear.Lever.Up) {
			Servo PWM.Duty Cycle = UpShift Duty Cycle;
			State Cycles = Num Upshift Cycles;
			Current State = Current State.Shift Up;
		} else if (Gear.Lever eq Gear.Lever.Down) {
			Servo PWM.Duty Cycle = DnShift Duty Cycle;
			State Cycles = Num Dnshift Cycles;
			Current State = Current State.Shift Dn;
		}
	}
	is (Preload Dn) {
		if (Gear.Lever eq Gear.Lever.Down) {
			Servo PWM.Duty Cycle = DnShift Duty Cycle;
			State Cycles = Num Dnshift Cycles;
			Current State = Current State.Shift Dn;
		} else  if (Gear.Lever eq Gear.Lever.Up) {
			Servo PWM.Duty Cycle = UpShift Duty Cycle;
			State Cycles = Num Upshift Cycles;
			Current State = Current State.Shift Up;
		}
	}
	is (Shift Up) {
		if (State Cycles neq 0) {
			State Cycles = State Cycles - 1;
		} else {
			Servo PWM.Duty Cycle = Neutral Duty Cycle;
			Current State = Current State.Idle;
		}
	}
	is (Shift Dn) {
		if (State Cycles neq 0) {
			State Cycles = State Cycles - 1;
		} else {
			Servo PWM.Duty Cycle = Neutral Duty Cycle;
			Current State = Current State.Idle;
		}
	}
	is (Return Dn) {
		if (State Cycles neq 0) {
			State Cycles = State Cycles - 1;
		} else {
			Servo PWM.Duty Cycle = Neutral Duty Cycle;
			Current State = Current State.Idle;
		}
	}
	is (Return Up) {
		if (State Cycles neq 0) {
			State Cycles = State Cycles - 1;
		} else {
			Servo PWM.Duty Cycle = Neutral Duty Cycle;
			Current State = Current State.Idle;
		}
	}
}
