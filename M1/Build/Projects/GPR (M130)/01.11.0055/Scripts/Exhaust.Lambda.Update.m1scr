/*
 * Calculate bank lambdas from cylinder lambdas
 */
local b1 = 0.0;
local b2 = 0.0;
local bc1 = 0;
local bc2 = 0;
local ben1 = false;
local ben2 = false;
expand (n = 1 to Engine.Maximum Cylinders)
{
	local enabled = Cylinder $(n).Diagnostic neq Cylinder $(n).Diagnostic.Not in Use;
	local ok = not Calculate.IsNAN(Cylinder $(n));

	expand (m = 1 to 2)
	{
		if (Engine.Cylinder $(n).Bank eq $(m))
		{
			ben$(m) = ben$(m) or enabled;
			if (ok)
			{
				b$(m) += Cylinder $(n);
				bc$(m) += 1;
			}
		}		
	}
}

expand (m = 1 to 2)
{
	if (bc$(m) > 0)
	{
		b$(m) /= bc$(m);
	}
}

/*
 * Determing collector state
 */
local collenabled = Collector.Diagnostic neq Collector.Diagnostic.Not in Use;
local collok = not Calculate.IsNAN(Collector);

/*
 * Assign bank lambdas
 */
expand (n = 1 to 2)
{
	local enabled = Bank $(n).Collector.Diagnostic neq Bank $(n).Collector.Diagnostic.Not in Use;
	local ok = not Calculate.IsNAN(Bank $(n).Collector);
	
	if (ok)
	{
		Bank $(n) = Bank $(n).Collector;
		Bank $(n).Diagnostic = Bank $(n).Diagnostic.Bank Collector;
	}
	else if (bc$(n) > 0)
	{
		Bank $(n) = b$(n);
		Bank $(n).Diagnostic = Bank $(n).Diagnostic.Cylinder Average;
	}
	else if (collok and $(n) eq 1) /* only bank 1 can default to collector */
	{
		Bank $(n) = Collector;
		Bank $(n).Diagnostic = Bank $(n).Diagnostic.Collector;
	}
	else if (enabled or ben$(n) or (collenabled and $(n) eq 1)) /* only bank 1 can default to collector */
	{
		Bank $(n).Diagnostic = Bank $(n).Diagnostic.Unavailable;
		Bank $(n) = Calculate.NAN();
	}
	else
	{
		Bank $(n).Diagnostic = Bank $(n).Diagnostic.Not in Use;
		Bank $(n) = Calculate.NAN();
	}
	
	local reset = Change.To(Bank $(n).Diagnostic.AsInteger() > 0);
	local nan = Calculate.IsNAN(Bank $(n));
	local filt = Library.Filter.FirstOrder(Bank $(n), This.Filter, reset);

	if (nan)
	{
		Bank $(n).Filtered = Calculate.NAN();
		Bank $(n).Normalised = Calculate.NAN();
	}
	else
	{
		Bank $(n).Filtered = filt;
		Bank $(n).Normalised = filt * Fuel.Closed Loop.Control.Bank $(n).Trim.GetUnscheduled();
	}
}

/*
 * Calculate overall lambda
 */
local b1ok = not Calculate.IsNAN(Bank 1);
local b2ok = not Calculate.IsNAN(Bank 2);
local b1en = Bank 1.Diagnostic neq Bank 1.Diagnostic.Not in Use;
local b2en = Bank 2.Diagnostic neq Bank 2.Diagnostic.Not in Use;
local reset = Change.To(Collector.Diagnostic.AsInteger() > 0);
local filt = Library.Filter.FirstOrder(Collector, This.Filter, reset);

if (collok)
{
	Value = Collector;
	Normalised = filt * (Fuel.Closed Loop.Control.Bank 1.Trim.GetUnscheduled() + Fuel.Closed Loop.Control.Bank 2.Trim.GetUnscheduled()) / 2;
	Filtered = filt;
	Diagnostic = Diagnostic.Collector;
}
else if (b1ok and b2ok)
{
	Value = (Bank 1 + Bank 2) / 2;
	Normalised = (Bank 1.Normalised + Bank 2.Normalised) / 2;
	Filtered = (Bank 1.Filtered + Bank 2.Filtered) / 2;
	Diagnostic = Diagnostic.Bank Average;
}
else if (b1ok)
{
	Value = Bank 1;
	Normalised = Bank 1.Normalised;
	Filtered = Bank 1.Filtered;
	Diagnostic = Diagnostic.Bank 1;
}
else if (b2ok)
{
	Value = Bank 2;
	Normalised = Bank 2.Normalised;
	Filtered = Bank 2.Filtered;
	Diagnostic = Diagnostic.Bank 2;
}
else if (collenabled or b1en or b2en)
{
	Diagnostic = Diagnostic.Unavailable;
	Value = Calculate.NAN();
	Normalised = Calculate.NAN();
	Filtered = Calculate.NAN();
}
else
{
	Diagnostic = Diagnostic.Not in Use;
	Value = Calculate.NAN();
	Normalised = Calculate.NAN();
	Filtered = Calculate.NAN();
}

/*
 * Process Warning
 */
local override = false;
local icut = Change.By(Ignition.Output.Cut Count.GetUnscheduled(), 1);
local fcut = Change.By(Fuel.Output.Cut Count.GetUnscheduled(), 1);		// includes Engine Overrun
local enable = 	Engine.State eq Engine.State.Run and
				Diagnostic.AsInteger() > Diagnostic.Not in Use.AsInteger() and
				not icut and
				not fcut;
This.Warning.Update(
	Value,
	override,
	enable
);

 
 