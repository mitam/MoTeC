static local sensOK = true;

/* Diagnostic */

local stuckSens = Debounce.Stable((Force.Sensor < Force.Threshold.Down or Force.Sensor > Force.Threshold.Up) and not Calculate.IsNAN(Force.Sensor), Diagnostic.Delay);
local stuckUp = Debounce.Stable(Up Switch eq Up Switch.On, Diagnostic.Delay);
local stuckDown = Debounce.Stable(Down Switch eq Down Switch.On, Diagnostic.Delay);
local stuckSwitch = stuckUp or stuckDown;
local sensInUse = Force.Sensor.Voltage.IsActive();
local switchInUse = Up Switch.Index.AsInteger() > 0 and Down Switch.Index.AsInteger() > 0;
	
local diag = Gear Request Diagnostic Enumeration.OK;

if (sensInUse and switchInUse)
{
	if (Force.Sensor.Diagnostic neq Force.Sensor.Diagnostic.OK or stuckSens)
	{
		if (stuckSwitch)
		{
			diag = diag.No Valid Input;
		}
		else if (Force.Sensor.Diagnostic neq Force.Sensor.Diagnostic.OK)
		{
			diag = diag.Sensor Fault;
		}
		else
		{
			diag = diag.Stuck Sensor;
		}
	}
	else if (stuckSwitch)
	{
		diag = diag.Stuck Switch;
	}
}
else if ((sensInUse and (Force.Sensor.Diagnostic neq Force.Sensor.Diagnostic.OK or stuckSens))
		or (switchInUse and stuckSwitch))
{
	diag = diag.No Valid Input;
}

/* Value set to Idle on startup if the lever resources are assigned */
if (Value neq Value.Not in Use)
{
	if (Force.Sensor.Diagnostic eq Force.Sensor.Diagnostic.OK and not stuckSens)	// treat warnings as errors, otherwise short voltage spikes can result in shift requests 
	{
		if (sensOK)
		{
			when (Value)
			{
				is (Idle)
				{
					if (Force.Sensor > Force.Threshold.Up)
					{
						Value = Value.Up;
					}
					else if (Force.Sensor < Force.Threshold.Down)
					{
						Value = Value.Down;
					}
				}
				is (Up)
				{
					if (Force.Sensor < Limit.Min((Force.Threshold.Up - Force.Hysteresis), 0.0))
					{
						Value = Value.Idle;
					}
				}
				is (Down)
				{
					if (Force.Sensor > Limit.Max((Force.Threshold.Down + Force.Hysteresis), 0.0))
					{
						Value = Value.Idle;
					}
				}
				is (Lockout)	// return to sensor operation only when Force.Sensor is within Idle thresholds
				{
					if ((Force.Sensor < Limit.Min((Force.Threshold.Up - Force.Hysteresis), 0.0))
						and (Force.Sensor > Limit.Max((Force.Threshold.Down + Force.Hysteresis), 0.0)))
					{
						Value = Value.Idle;
					}
				}
				is (Not in Use)
				{
					/* can't get here */
				}
			}
		}
		else	// go back to sensor value via Lockout after error healing
		{
			Value = Value.Lockout;
			sensOK = true;
		}
	}
	else
	{
		sensOK = false;
		
		/* Only use the switches if the sensor is faulty or not used */
		if (Up Switch eq Up Switch.On and not stuckSwitch)
		{
			Value = Value.Up;
		}
		else if (Down Switch eq Down Switch.On and not stuckSwitch)
		{
			Value = Value.Down;
		}
		else if (stuckSwitch)
		{
			Value = Value.Lockout;
		}
		else
		{
			Value = Value.Idle;
		}
	}
}
else
{
	diag = Gear Request Diagnostic Enumeration.Not In Use;
}

Diagnostic = diag;
