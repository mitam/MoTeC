local et = System.ElapsedTime();

/*
 * Determine engine state
 */
local cyclelock = false;
local stopped = false;
local turning = false;
when (This.Speed.Reference.State)
{
	is (Open or Initialise or Stall or Error or Exit)
	{
		stopped = true;
	}
	is (Test)
	{
		stopped = true;
	}
	is (First Edge or First Period or Search or Pattern Lock)
	{
		turning = true;
	}
	is (Cycle Lock)
	{
		turning = true;
		cyclelock = true;
	}
}
local running = (This.Speed > This.Run Threshold) and cyclelock;

/*
 * Update state channel and engine timers.
 */
when (State)
{
	is (Startup)
	{
		if (turning)
		{
			State = State.Crank;
		}
	}
	is (Stop)
	{
		if (turning)
		{
			State = State.Crank;
		}
		else
		{
			This.Stall Time += et;
		}
		Crank.Cycles = 0; /* Ensure cranking comp is valid on transition to crank */
	}
	is (Crank)
	{
		if (stopped)
		{
			This.Stall Time = 0.0;
			State = State.Stop;
			Crank Time = 0.0;
		}
		else if (running)
		{
			This.Run Time = 0.0;
			This.Trip Time = 0.0;
			State = State.Run;
			Crank Time = 0.0;
			Crank.Cycles = Calculate.NAN();
		}
		else
		{
			Crank Time += et;
			local <Unsigned Integer> cycles = 0;
			if (Fuel.Cylinder 1.Primary.Output.IsActive())
			{
				expand (n = 1 to Maximum Cylinders)
				{
					cycles += Fuel.Cylinder $(n).Primary.Output.Cycle Count.GetUnscheduled();
				}
			}
			else
			{
				expand (n = 1 to Maximum Cylinders)
				{
					cycles += Fuel.Cylinder $(n).Secondary.Output.Cycle Count.GetUnscheduled();
				}
			}
			cycles /= Cylinders;
			if ((cycles > Convert.ToUnsignedInteger(Crank.Cycles)) or Calculate.IsNAN(Crank.Cycles))
			{
				Crank.Cycles = cycles;
			}
		}
	}
	is (Run)
	{
		if (stopped)
		{
			This.Stall Time = 0.0;
			State = State.Stop;
			This.Run Time = 0.0;
		}
		else
		{
			This.Run Time += et;
			This.Trip Time += et;
		}
	}
}

/*
 * Cam control
 */
Inlet.Camshaft.Bank 1.SetEnable(running);
Inlet.Camshaft.Bank 2.SetEnable(running);
Exhaust.Camshaft.Bank 1.SetEnable(running);
Exhaust.Camshaft.Bank 2.SetEnable(running);

/*
 * Fuel pump
 */
Fuel.Pump.Update(
    turning,
    not (Run Switch.Index.AsInteger() > 0) or (Run Switch eq Run Switch.On)
);

/*
 * Wastegate Pressure Control
 */
Turbocharger.Wastegate.Pressure.SetEnable(running);
