local frontmax = 0.0;
local frontmin = Calculate.Infinity();
local rearmax = 0.0;
local rearmin = Calculate.Infinity();

if (Wheel Speed.Front.Right.Diagnostic.AsInteger() > 0)
{
	local sp = Wheel Speed.Front.Right;
	frontmin = sp;
	frontmax = sp;
}

if (Wheel Speed.Front.Left.Diagnostic.AsInteger() > 0)
{
	local sp = Wheel Speed.Front.Left;
	frontmin = Calculate.Min(frontmin, sp);
	frontmax = Calculate.Max(frontmax, sp);
}

if ((frontmax <= 0.0) and
	Wheel Speed.Front.Drive.Diagnostic.AsInteger() > 0 and
	Wheel Speed.Front.Drive.Diagnostic neq Wheel Speed.Front.Drive.Diagnostic.Vehicle Speed Fallback)
{
	local sp = Wheel Speed.Front.Drive;
	frontmin = sp;
	frontmax = sp;
}

if (Wheel Speed.Rear.Right.Diagnostic.AsInteger() > 0)
{
	local sp = Wheel Speed.Rear.Right;
	rearmin = sp;
	rearmax = sp;
}

if (Wheel Speed.Rear.Left.Diagnostic.AsInteger() > 0)
{
	local sp = Wheel Speed.Rear.Left;
	rearmin = Calculate.Min(rearmin, sp);
	rearmax = Calculate.Max(rearmax, sp);
}

if ((rearmax <= 0.0) and
	Wheel Speed.Rear.Drive.Diagnostic.AsInteger() > 0 and
	Wheel Speed.Rear.Drive.Diagnostic neq Wheel Speed.Rear.Drive.Diagnostic.Vehicle Speed Fallback)
{
	local sp = Wheel Speed.Rear.Drive;
	rearmin = sp;
	rearmax = sp;
}

/*
 * 2-wheel drive:
 * - Braking: fastest wheel
 * - Acceleration: fastest undriven wheel
 *
 * 4-wheel drive:
 * - Braking: fastest wheel
 * - Acceleration: slowest wheel
 */

local frontSensorInUse = Wheel Speed.Front.Left.Diagnostic neq Wheel Speed.Front.Left.Diagnostic.Not in Use or
						 Wheel Speed.Front.Right.Diagnostic neq Wheel Speed.Front.Right.Diagnostic.Not in Use or
						 (Wheel Speed.Front.Drive.Diagnostic neq Wheel Speed.Front.Drive.Diagnostic.Not in Use
						 and Wheel Speed.Front.Drive.Diagnostic neq Wheel Speed.Front.Drive.Diagnostic.Vehicle Speed Fallback);
local rearDelayed = Delay.Rising(rearmin > 0.0, Diagnostic Delay);

local rearSensorInUse = Wheel Speed.Rear.Left.Diagnostic neq Wheel Speed.Rear.Left.Diagnostic.Not in Use or
						 Wheel Speed.Rear.Right.Diagnostic neq Wheel Speed.Rear.Right.Diagnostic.Not in Use or
						 (Wheel Speed.Rear.Drive.Diagnostic neq Wheel Speed.Rear.Drive.Diagnostic.Not in Use
						 and Wheel Speed.Rear.Drive.Diagnostic neq Wheel Speed.Rear.Drive.Diagnostic.Vehicle Speed Fallback);
local frontDelayed = Delay.Rising(frontmin > 0.0, Diagnostic Delay);

local speed = 0.0;
when (Brake.State)
{
	is (On)
	{
		speed = Calculate.Max(frontmax, rearmax);
	}
	is (Off or Sensor Fault or Unknown)
	{
		when (Vehicle.Drive Type)
		{
			is (Rear)
			{
				/* May not have a sensor on the front axle */
				if (frontmax > 0.0 or (frontSensorInUse and not rearDelayed))	// use rearmin with no delay when there is no front sensor
				{
					speed = frontmax;
				}
				else
				{
					speed = rearmin;
				}
			}
			is (Front)
			{
				/* May not have a sensor on the rear axle */
				if (rearmax > 0.0 or (rearSensorInUse and not frontDelayed))	// use frontmin with no delay when there is no rear sensor
				{
					speed = rearmax;
				}
				else
				{
					speed = frontmin;
				}
			}
			is (All)
			{
				speed = Calculate.Min(frontmin, rearmin);
			}
		}
	}
}

/* Infinity is a sentinal value */
if (speed >= Calculate.Infinity())
{
	speed = 0.0;
}

local fault = Delay.Rising(
	speed <= 0.0
	and Throttle.Position > Moving Throttle
	and Engine.Speed > Stationary Engine Speed
	and Ignition.Output.Cut Average.GetUnscheduled() <= 0.0
	and Fuel.Output.Cut Average.GetUnscheduled() <= 0.0
	and Launch.State.GetUnscheduled() eq Launch.State.Disabled
	and Anti Lag.State.GetUnscheduled() neq Anti Lag.State.Enabled,
	Vehicle.Speed.Diagnostic Delay
);

local stopped = Delay.Rising(
	fault eq false
	and speed <= 0.0
	and Throttle.Position < Stationary Throttle
	and Engine.Speed < Stationary Engine Speed,
	Vehicle.Speed.Diagnostic Delay
);

local UseGPS = Delay.Falling(speed <= 0.0 and Root.GPS.Speed > 2.78 /* 10kph */, Diagnostic Delay);

if (speed > 0.0)
{
	Value = speed;
	State = State.Wheel Speed;
}
else if (UseGPS and Root.GPS.Diagnostic.AsInteger() >= 1)
{
	Value = Root.GPS.Speed;
	State = State.GPS;
}
else if (stopped)
{
	Value = 0.0;
	/* hold previous State */
}
else if (fault or Vehicle.Speed.State eq Vehicle.Speed.State.Estimated)
{
	local gearUnscheduled = Gear.GetUnscheduled(); // fix circular startup dependency
	local vehDrCirOK = Vehicle.DriveCircumference() > 0.001;
	if ((gearUnscheduled neq gearUnscheduled.Neutral) and vehDrCirOK)
	{
		Value = Engine.Speed / (360.0 * Vehicle.DriveRatio()) * Vehicle.DriveCircumference();
	}
	else
	{
		Value = 0.0;
	}
	State = State.Estimated;
}
else
{
	Value = 0.0;
	/* hold previous State */
}
