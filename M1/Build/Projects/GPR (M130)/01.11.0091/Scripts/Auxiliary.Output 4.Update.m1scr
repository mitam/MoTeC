local testmode = Test eq Test.Enabled;

if (testmode)
{
	State = State.Test;
}
else
{
	when (State)
	{
		is (Enabled)
		{
			if ((Throttle.Position < (Activate.Throttle Position Minimum - Activate.Throttle Position Hysteresis)) or
				(Throttle.Position > (Activate.Throttle Position Maximum + Activate.Throttle Position Hysteresis))
			)
			{
				State = State.Disabled;
			}
		}
		is (Disabled)
		{
			if ((Throttle.Position > Activate.Throttle Position Minimum) and
				(Throttle.Position < Activate.Throttle Position Maximum)
			)
			{
				State = State.Enabled;
			}	
		}
		is (Test)
		{
			State = State.Disabled;
		}
	}
}

local dc = 0.0;

when (State)
{
	is (Enabled)
	{
		dc = Duty Cycle;
	}
	is (Disabled)
	{
		dc = 0.0;
	}
	is (Test)
	{
		dc = Test.Duty Cycle;
	}
}

if (Polarity eq Polarity.Inverting)
{
	dc = 1.0 - dc;
}

Output.Duty Cycle = dc;
