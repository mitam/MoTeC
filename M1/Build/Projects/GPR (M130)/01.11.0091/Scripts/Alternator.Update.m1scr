/*
 * Need to avoid integral windup during low voltage start, etc
 */
local dt = System.ElapsedTime();

if ((Engine.Run Time <= 2.0) or (not Actuator.Output.IsActive()))
{
	State = State.Disabled;
	Control.Error = Calculate.NAN();
	Control.Proportional = Calculate.NAN();
	Control.Integral = Calculate.NAN();
	Control = Calculate.NAN();
	Actuator.Output.Duty Cycle = 0.0;
}
else
{
	local error = Aim - ECU.Battery.Voltage;
	Control.Proportional = error * Control.Proportional.Gain;

	if (Calculate.IsNAN(Control.Integral) or Control.Integral.Gain <= 0.0)
	{
		Control.Integral = 0.0;
	}
	else
	{
		local pid = Control.Proportional + Control.Integral;
		local max = Actuator.Maximum;
		local min = Actuator.Minimum;
		
		local i = Control.Integral + Control.Integral.Gain * Control.Error * dt;
		if (pid > max)
		{
			/* integral only allowed to reduce */
			Control.Integral = Library.Calculate.Min(Control.Integral, i);
		}
		else if (pid < min)
		{
			/* integral only allowed to increase */
			Control.Integral = Library.Calculate.Max(Control.Integral, i);
		}
		else
		{
			Control.Integral = i;
		}
	}

	Control = Control.Proportional + Control.Integral;
	Control.Error = error;
	State = State.OK;
	if (Actuator.Polarity eq Actuator.Polarity.Inverting)
	{
	Actuator.Output.Duty Cycle = Limit.Range(1.0 - Control, Actuator.Minimum, Actuator.Maximum);
	}
	else
	{
	Actuator.Output.Duty Cycle = Limit.Range(Control, Actuator.Minimum, Actuator.Maximum);
	}
}
