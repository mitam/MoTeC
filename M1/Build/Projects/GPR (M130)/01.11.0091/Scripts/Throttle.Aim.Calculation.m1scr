static local testAimEnabled = false;
local changedThrottleTestAim = Change.By(Throttle.Test.Aim, 0.001 /* 0.1% */);
local changedMode = Change.To(Throttle.Test eq Throttle.Test.Static Test);
if (Parent.Test neq Parent.Test.Static Test)
{
	testAimEnabled = false;
}
else if (changedThrottleTestAim or changedMode)	// allow Throttle Test Aim to get effective only after value has been changed
{
	testAimEnabled = true;
}

if (Throttle.Pedal.Sensor.Diagnostic eq Throttle.Pedal.Sensor.Diagnostic.Not in Use)
{
	Value = Calculate.NAN();
	State = State.Pedal;
	Diagnostic = Diagnostic.Not in Use;

	Throttle.Servo.Bank 1.Aim = 0.0;
	Throttle.Servo.Bank 2.Aim = 0.0;
}
else
{
	local v = 0.0;
	local s = State.Pedal;
	local d = Diagnostic.OK;

	if ((Parent.Test eq Parent.Test.Step Test) and
		((Engine.State eq Engine.State.Startup) or (Engine.State eq Engine.State.Stop)))
	{
		if (Parent.Test.Timer.Remaining() <= 0.0)
		{
			if ((Value - Parent.Test.Closed) <= 0.0)
			{
				v = Parent.Test.Open;
			}
			else
			{
				v = Parent.Test.Closed;
			}
			
			Parent.Test.Timer.Start(Parent.Test.Period / 2.0);
		}
		else
		{
			v = Value;
		}
		
		s = State.Test;
	}
	else if (testAimEnabled)
	{
		v = Throttle.Test.Aim;
		s = State.Test;
	}
	else
	{
		/*
		 * Start with ThrottlePedalFault true.
		 * This guarantees that the throttle pedal can be below Request -- i.e. safe
		 * before we use it for anything.
		 */
		static local ThrottlePedalFault = true;
		if ((Throttle.Pedal.Sensor.Diagnostic.AsInteger() >= Throttle.Pedal.Sensor.Diagnostic.OK.AsInteger())
			and (
				(not ThrottlePedalFault)
				or (Throttle.Pedal <= Value)
			)
		)
		{
			/*
			 * only resume normal operation after a pedal fault when the pedal value is below the current request.
			 * This prevents a potentially large throttle step when the pedal recovers, but requires the driver
			 * releases the pedal after a fault. This seems to be normal behaviour when things stop working and means
			 * that any increase in throttle is according to driver demand.
			 */
			local pedal = Calculate.Max(Throttle.Pedal, Idle.Throttle Pedal Offset + (Throttle.Pedal * Idle.Throttle Pedal Blend));
			
			/*
			 * Prevent a ridiculous throttle translation table holding the throttle wide open.
			 * Same logic as M800.
			 */
			pedal = Calculate.Min(pedal, (Throttle.Pedal.Sensor * 2.0 + 0.2));
			
			if (v < pedal)
			{
				v = pedal;
				s = State.Pedal;
			}
			
			ThrottlePedalFault = false;
		}
		else
		{
			v = 0.0;
			ThrottlePedalFault = true;
		}
		
		/*
		 * Anti Lag
		 */
		if ((Anti Lag.State eq Anti Lag.State.Enabled) and
			(v < Anti Lag.Throttle Aim)
		)
		{
			v = Anti Lag.Throttle Aim;
			s = State.Anti Lag;
		}

		/*
		 * Limit
		 */
		if (not Calculate.IsNAN(Throttle.Limit) and
			(v > Throttle.Limit)
		)
		{
			v = Throttle.Limit;
			s = State.Throttle Limit;
		}

		/*
		 * Idle
		 */
		if (v < Idle.Actuator.Throttle Aim)
		{
			v = Idle.Actuator.Throttle Aim;
			s = State.Idle;
		}

		/*
		 * Gear Shift Throttle Blip
		 */
		if (not Calculate.IsNAN(Gear.Shift.Throttle Aim) and
			(v < Gear.Shift.Throttle Aim)
		)
		{
			v = Gear.Shift.Throttle Aim;
			s = State.Gear Shift;
		}

		if (ThrottlePedalFault)
		{
			d = Diagnostic.Throttle Pedal Fault;
		}
	}

	Value = v;
	State = s;
	Diagnostic = d;

	local aim = Throttle.Area.ReverseLookupX(v);
	Throttle.Servo.Bank 1.Aim = aim;
	Throttle.Servo.Bank 2.Aim = aim;
}
