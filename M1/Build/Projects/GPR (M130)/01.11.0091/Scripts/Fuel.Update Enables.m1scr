local testmode = Engine.Speed.Reference.State eq Engine.Speed.Reference.State.Test;
local off = (Engine.Run Switch.Index.AsInteger() > 0) and (Engine.Run Switch eq Engine.Run Switch.Off) and not testmode;

local cs = off ? Port Injection Enable.Disabled : Port Injection Enable.Enabled;
local c1 = cs;
local c2 = cs;
local c3 = cs;
local c4 = cs;
local c5 = cs;
local c6 = cs;
local c7 = cs;
local c8 = cs;

when (Test)
{
	is (Disabled)
	{
		if (off)
		{
			State = State.Disabled;
		}
		else
		{
			State = State.Enabled;
		}
	}
	is (Cut Bank 1)
	{
		expand (n = 1 to Engine.Maximum Cylinders)
		{
			if (Engine.Cylinder $(n).Bank eq 1)
			{
				c$(n) = c$(n).Disabled;
			}
		}
		State = State.Cut Bank 1 Test;
	}
	is (Cut Bank 2)
	{
		expand (n = 1 to Engine.Maximum Cylinders)
		{
			if (Engine.Cylinder $(n).Bank eq 2)
			{
				c$(n) = c$(n).Disabled;
			}
		}
		State = State.Cut Bank 2 Test;
	}
	is (Cut Cylinder 1)
	{		c1 = c1.Disabled;
		State = State.Cut Cylinder 1 Test;
	}
	is (Cut Cylinder 2)
	{
		c2 = c2.Disabled;
		State = State.Cut Cylinder 2 Test;
	}
	is (Cut Cylinder 3)
	{
		c3 = c3.Disabled;
		State = State.Cut Cylinder 3 Test;
	}
	is (Cut Cylinder 4)
	{
		c4 = c4.Disabled;
		State = State.Cut Cylinder 4 Test;
	}
	is (Cut Cylinder 5)
	{
		c5 = c5.Disabled;
		State = State.Cut Cylinder 5 Test;
	}
	is (Cut Cylinder 6)
	{
		c6 = c6.Disabled;
		State = State.Cut Cylinder 6 Test;
	}
	is (Cut Cylinder 7)
	{
		c7 = c7.Disabled;
		State = State.Cut Cylinder 7 Test;
	}
	is (Cut Cylinder 8)
	{
		c8 = c8.Disabled;
		State = State.Cut Cylinder 8 Test;
	}
}

expand (n = 1 to Engine.Maximum Cylinders)
{
	if ($(n) > Engine.Cylinders)
	{
		c$(n) = c$(n).Disabled;
	}
}

if (Injector.Primary.Location eq Injector.Primary.Location.Not in Use)
{
	expand (n = 1 to Engine.Maximum Cylinders)
	{
		Cylinder $(n).Primary.Output.Enable = Cylinder $(n).Primary.Output.Enable.Disabled;
	}
}
else
{
	expand (n = 1 to Engine.Maximum Cylinders)
	{
		Cylinder $(n).Primary.Output.Enable = c$(n);
	}
}

if (Injector.Secondary.Location eq Injector.Secondary.Location.Not in Use)
{
	expand (n = 1 to Engine.Maximum Cylinders)
	{
		Cylinder $(n).Secondary.Output.Enable = Cylinder $(n).Secondary.Output.Enable.Disabled;
	}
}
else
{
	expand (n = 1 to Engine.Maximum Cylinders)
	{
		Cylinder $(n).Secondary.Output.Enable = c$(n);
	}
}
