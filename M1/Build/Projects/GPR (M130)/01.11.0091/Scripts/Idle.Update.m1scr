/* Avoid circular dependencies */
local throttleAimStateUnscheduled = Throttle.Aim.State.GetUnscheduled();
local normal = Ignition.Timing.Mode.GetUnscheduled() eq Ignition.Timing.Mode.Normal;

local nodbw = Throttle.Pedal.Sensor.Diagnostic eq Throttle.Pedal.Sensor.Diagnostic.Not in Use;
local request = (throttleAimStateUnscheduled eq throttleAimStateUnscheduled.Idle) or (throttleAimStateUnscheduled eq throttleAimStateUnscheduled.Pedal) or nodbw;
local run = Engine.State eq Engine.State.Run;
local et = System.ElapsedTime();
local gearShiftState = Gear.Shift.State.GetUnscheduled(); // prevent circular startup dependency - not shifting when firmware starts
local gshst = 	gearShiftState neq gearShiftState.Idle and
				gearShiftState neq gearShiftState.Rearm;

local esin = Engine.Speed < (Aim + Activate.Engine Speed Margin) or State eq State.Enabled;
local tpin = not Calculate.Hysteresis(
	Throttle.Pedal,
	Activate.Throttle Pedal.Threshold,
	Activate.Throttle Pedal.Threshold + Activate.Throttle Pedal.Hysteresis,
	0.0
);

Engine.Overrun.Calculation(tpin and request, gshst);
local test = Actuator.Solenoid.Test eq Actuator.Solenoid.Test.Enabled;
local overrun = Engine.Overrun.State neq Engine.Overrun.State.Disabled and
	Engine.Overrun.State neq Engine.Overrun.State.Advance Ignition;
local inidle = 	esin and tpin and request and normal and
				not overrun and not gshst and run and Mode eq Mode.Enabled and
				not test;

/* only consider switch if fitted */
if (This.Switch.IsActive())
{
	inidle = inidle and This.Switch eq This.Switch.On;
}

local exit = Change.To(inidle eq false);

static local tpfilt = 0.0;
tpfilt = Filter.FirstOrder(
	inidle ? Root.Throttle.Position : tpfilt,
	This.Throttle Pedal Offset.Filter
);

tpfilt = Calculate.Min(tpfilt, Throttle Pedal Offset.Limit);

if (inidle)
{
	local ff = true;
	This.Ignition Timing Limit Advance.Update(ff, gshst);
	
	when (State)
	{
		is (Enabled)
		{
			This.Throttle Pedal Offset = 0.0;
		}
		is (Disabled)
		{
			if (Engine.Speed < Aim)
			{
				State = State.Enabled;
			}
			else if (throttleAimStateUnscheduled eq throttleAimStateUnscheduled.Pedal)
			{
				This.Throttle Pedal Offset = Calculate.Max(This.Throttle Pedal Offset - (This.Throttle Pedal Offset.Decay * et), 0.0);
			}
		}
		is (Actuator Test)
		{
			/* impossible to get here as inidle must be false */
		}
	}
}
else
{
	if (test)
	{
		State = State.Actuator Test;
	}
	else
	{
		State = State.Disabled;
	}

	local ff = false;
	This.Ignition Timing Limit Advance.Update(ff, gshst);
	
	if (exit)
	{
		This.Throttle Pedal Offset = tpfilt;
	}
	else if (Mode eq Mode.Disabled)
	{
		This.Throttle Pedal Offset = 0.0;
	}
}
