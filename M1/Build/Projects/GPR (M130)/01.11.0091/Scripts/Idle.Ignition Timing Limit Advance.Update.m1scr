local et = System.ElapsedTime();

when (Idle.State)
{
	is (Disabled or Actuator Test)
	{
		/*
		 * If 'ff' is true we are going to enable idle control and need
		 * to ramp the limit towards 'Target'. Otherwise, we have
		 * been disabled and need to ramp out the limit
		 */
		if (Engine.State neq Engine.State.Run)
		{
			Value = Ignition.Timing.Cranking;
		}
		else if (Calculate.IsNAN(Value) and in.ff)
		{
			Value = Ignition.Timing.GetUnscheduled();
		}
		else if (not Calculate.IsNAN(Value))
		{
			local v = Value;
			if (in.ff)
			{
				v = Calculate.Min(v + (Ramp * et), Target);
			}
			else
			{
				v = v - (Ramp * et);
			
				if (v < Ignition.Timing.Normal or in.gshst)
				{
					v = Calculate.NAN();
				}
			}
	
			Value = v;
		}
		Control.Error = Calculate.NAN();
		Control.Proportional = Calculate.NAN();
		Control.Integral = Calculate.NAN();
	}
	is (Enabled)
	{
		/*
		 * Engine speed has fallen to below idle aim and we are now in control.
		 * Safe to assume 'Value' is not NAN as we are guaranteed to run at least
		 * once with ff = true before 'Idle.State' transitions to enabled.
		 */
		local err = Engine.Speed - Idle.Aim;
		Control.Proportional = err * Control.Proportional.Gain;
		local pid = Target + Control.Proportional;

		Control.Integral.Maximum = Library.Calculate.Max(Minimum - pid, 0.0);
		Control.Integral.Minimum = Library.Calculate.Min(Ignition.Timing.Normal - pid, 0.0);

		if ((Control.Integral.Gain > 0) and
			not Calculate.IsNAN(Control.Integral)
		)
		{
			Control.Integral = Library.Limit.Range(
				Control.Integral + (Control.Integral.Gain * err * et),
				Control.Integral.Minimum,
				Control.Integral.Maximum
			);
		}
		else
		{
			Control.Integral = 0.0;
		}

		Control.Error = err;
		Value = Library.Limit.Range(
			Control.Integral + pid,
			Ignition.Timing.Normal,
			Minimum
		);
	}
}
