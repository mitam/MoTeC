local v = 1.0;
local s = State.None;

if (Engine.Load.Average.Throttle Limit < v)
{
	v = Engine.Load.Average.Throttle Limit;
	s = s.Engine Load Average;
}

if (Race Time.Mode neq Race Time.Mode.Not in Use and Race Time.Throttle Limit < v)
{
	v = Race Time.Throttle Limit;
	s = s.Race Time;
}

if (Gear.Throttle Limit < v)
{
	v = Gear.Throttle Limit;
	s = s.Gear;
}

if ((Launch.State eq Launch.State.Enabled) and
	(Launch.Throttle Limit < v))
{
	v = Launch.Throttle Limit;
	s = s.Launch;
}

if ((Vehicle.Speed.Limit.Control.State eq Vehicle.Speed.Limit.Control.State.Enabled) and
	(Vehicle.Speed.Limit.Control.Throttle.Limit < v))
{
	v = Vehicle.Speed.Limit.Control.Throttle.Limit;
	s = s.Vehicle Speed Limit;
}

if ((Vehicle.Speed.Limit.Pit.Mode eq Vehicle.Speed.Limit.Pit.Mode.Engine Speed Limit) and
	(not Calculate.IsNAN(Vehicle.Speed.Limit.Pit.Engine Speed Limit)) and
	(Vehicle.Speed.Limit.Pit.Throttle Limit < v))
{
	v = Vehicle.Speed.Limit.Pit.Throttle Limit;
	s = s.Vehicle Speed Limit;
}

if (v >= 1.0)
{
	v = Calculate.NAN();
}

Value = v;
State = s;
