static local gearPrev = 0;
local gss = Gear.Shift.State.GetUnscheduled();
if (Gear.Value.AsInteger() neq gearPrev 
	and (gss eq gss.Idle or gss eq gss.Rearm)
	and Gear neq Gear.Default and gearPrev neq Gear Enumeration.Default.AsInteger())
{
	Lock.Start(This.Debounce);	// no gear shift allowed for this time if gear changed accidentally
}

when (gss)
{
	is (Idle)
	{
		local v = Value.Idle;

		Current = Gear; /* cache current gear for whole shift */

		local powerOn = (Throttle.Position > Power On Throttle Position);
		local sequential = Gear.Type eq Gear.Type.Sequential;
		
		if (Mode eq Mode.Enabled and 
			(Driver.Gear Shift Switch eq Driver.Gear Shift Switch.On or 
				Driver.Gear Shift Switch.Index eq Driver.Gear Shift Switch.Index.Not in Use)
			)
		{
			if (sequential)
			{
				v = Gear.Lever;
			}
			else if (powerOn and (Gear.Lever.AsInteger() > Gear.Lever.Lockout.AsInteger()))
			{
				v = Gear.Lever;
			}
		}

		when (v)
		{
			is (Up)
			{
				if ((Gear neq Gear.Maximum or not sequential) and (Engine.Speed > Engine Speed.Minimum) 
					and (Lock.Remaining() <= 0.0))
				{
					Next = Gear.Up;
					Value = Value.Up;
					SetType(Gear Shift Request Enumeration.Up);
					
					SetEngineSpeedState(1, true);
					
					Event.Default();
				}
				else
				{
					Value = Value.Lockout;
				}
			}
			is (Down)
			{
				local shiftEngineSpeed = Engine.Speed;
				if (Gear.Down neq Gear.Down.Default)
				{
					shiftEngineSpeed *= Gear.Ratio.Down / Gear.Ratio;
				}

				if (Current neq Gear.Minimum and Engine.Speed < Down Engine Speed and shiftEngineSpeed < Engine.Speed.Limit.Nominal
					and Engine.Speed > Engine Speed.Minimum and (Lock.Remaining() <= 0.0))
				{
					Next = Gear.Down;
					Value = Value.Down;
					SetType(Gear Shift Request Enumeration.Down);
					SetEngineSpeedState(2, false);
					
					Event.Default();
				}
				else
				{
					Value = Value.Lockout;
				}
			}
			is (Idle or Not in Use or Lockout or Hold)
			{
				Value = Value.Idle;
			}
		}
	}
	is (Pre Shift or Shift or Post Shift or Recover)
	{
		// nothing to do
	}
	is (Rearm)
	{
		/* interlock with gear shift: stays in Rearm until lever is idle */
		if (Gear.Lever.AsInteger() <= Gear.Lever.Lockout.AsInteger()) 
		{
			/* can only perform another manual shift when the lever has returned to centre */
			Value = Value.Idle;
			/*
			 * Timing is no longer critical after this point
			 */
			Event.Idle();
		}
	}
}

gearPrev = Gear.Value.AsInteger();
