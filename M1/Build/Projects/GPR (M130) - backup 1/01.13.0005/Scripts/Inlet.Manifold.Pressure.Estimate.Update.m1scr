when (This.Mode)
{
	is (Ambient Pressure Relative)
	{
		local amb = Airbox.Pressure;

		if (Airbox.Pressure.Sensor.Diagnostic.AsInteger() < Airbox.Pressure.Sensor.Diagnostic.OK.AsInteger())
		{
			amb = Ambient.Pressure;
		}
		Unfiltered = amb * Main;
	}
	is (100kPa Relative)
	{
		Unfiltered = 100000.0 * Main;
	}
	is (Boost Pressure Relative)
	{
		if (Calculate.IsNAN(Boost.Pressure.GetUnscheduled())) // GetUnscheduled() as Boost Pressure depends on Inlet Manifold Pressure
		{
			Unfiltered = 0.0;
		}
		else
		{
			local bps = Boost.Pressure.GetUnscheduled(); 
			if (Calculate.IsNAN(Boost.Pressure.Sensor.GetUnscheduled())) // Boost Pressure uses MAP Sensor fallback which can be below Ambient Pressure
			{
				bps = Calculate.Max(0.0, bps);
			}
			Unfiltered = (bps + Ambient.Pressure) * Main;
		}
	}
}

Value = Library.Filter.FirstOrder(Unfiltered, This.Filter);
