Value = Convert.ToInteger(Maximum * Idle.Mass Flow);

local aim = 0;
local duty = Calculate.Min(Reference Voltage / ECU.Battery.Voltage, 1.0);

when (State)
{
	is (Not in Use)
	{
		if (Phase A.IsActive() and Phase B.IsActive())
		{
			State = State.Home;
		}

		duty = 0.0;
	}
	is (Home)
	{
		aim = Maximum;
		if (Position eq aim)
		{
			State = State.OK;
		}
	}
	is (OK)
	{
		aim = Value;
	}
}

static local <Unsigned Integer> div = 0;
div += 1;
if (div >= Divider)
{
	div = 0;
}

if (Position eq aim)
{
	duty = Calculate.Min(Hold Voltage / ECU.Battery.Voltage, 1.0);
}
else if (div eq 0)
{
	if (Position > aim)
	{
		Position -= 1;
	}
	else if (Position < aim)
	{
		Position += 1;
	}
	
	/* Do our best to remember position */
	System.Preserve();
}

local phase = Calculate.Modulo(Position, 4);
if (phase < 0)
{
	phase = 4 + phase;
}

if (phase eq 0)
{
	Phase A.Duty Cycle = -duty;
	Phase B.Duty Cycle = -duty;
}
else if (phase eq 1)
{
	Phase A.Duty Cycle = -duty;
	Phase B.Duty Cycle = duty;
}
else if (phase eq 2)
{
	Phase A.Duty Cycle = duty;
	Phase B.Duty Cycle = duty;
}
else if (phase eq 3)
{
	Phase A.Duty Cycle = duty;
	Phase B.Duty Cycle = -duty;
}
