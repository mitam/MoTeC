static local checked = false;	// code cannot run on Startup because Pin Diagnostic is initialised later

if (not checked)
{
	local pt = 0.0;

	if (Fuel.Cylinder 1.Primary.Output.IsActive())
	{
		pt = Primary.Peak Time;
	}

	if (Fuel.Cylinder 1.Secondary.Output.IsActive())
	{
		pt = Calculate.Max(pt, Secondary.Peak Time);
	}

	Fuel.Output.Peak Time = pt;

	/* Check if a Peak and Hold injector is assigned to a non-peak&hold output */

	local injTypePrimOK = true;
	local injTypeSecOK = true;

	expand (n = 1 to Engine.Maximum Cylinders)
	{
		if ($(n) <= Engine.Cylinders and 
			Primary.Type neq Primary.Type.Saturated and 
			Fuel.Cylinder $(n).Primary.Output.IsActive() and
			Fuel.Cylinder $(n).Primary.Pin.Diagnostic eq Fuel.Cylinder $(n).Primary.Pin.Diagnostic.Not in Use
			)
		{
			injTypePrimOK = false;
		}	
		if ($(n) <= Engine.Cylinders and 
			Secondary.Type neq Secondary.Type.Saturated and 
			Fuel.Cylinder $(n).Secondary.Output.IsActive() and
			Fuel.Cylinder $(n).Secondary.Pin.Diagnostic eq Fuel.Cylinder $(n).Secondary.Pin.Diagnostic.Not in Use
			)
		{
			injTypeSecOK = false;
		}
	}

	if (not Fuel.Cylinder 1.Primary.Output.IsActive())
	{
		Primary.Diagnostic = Primary.Diagnostic.Not in Use;
	}
	else if (injTypePrimOK)
	{
		Primary.Diagnostic = Primary.Diagnostic.OK;
	}
	else
	{
		Primary.Diagnostic = Primary.Diagnostic.Configuration Error;
	}

	if (not Fuel.Cylinder 1.Secondary.Output.IsActive())
	{
		Secondary.Diagnostic = Secondary.Diagnostic.Not in Use;
	}
	else if (injTypeSecOK)
	{
		Secondary.Diagnostic = Secondary.Diagnostic.OK;
	}
	else
	{
		Secondary.Diagnostic = Secondary.Diagnostic.Configuration Error;
	}
	checked = true;
}
