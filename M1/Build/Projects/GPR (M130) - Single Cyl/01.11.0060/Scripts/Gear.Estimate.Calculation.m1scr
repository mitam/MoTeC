local p = -1000;
local stateStable = Library.Delay.Stable(State.AsInteger(), 0.1);
local speedUpdated = Change.By(Convert.ToInteger(Gear.Speed Sensor.Periodic Input.Edge Ticks), 1);
static local engineSpeedPrevious = 0.0;
local vehicleSpeedStateUnscheduled = Vehicle.Speed.State.GetUnscheduled(); // prevent curcular dep in startup schedule

if (vehicleSpeedStateUnscheduled eq vehicleSpeedStateUnscheduled.Estimated
	or Calculate.IsNAN(Gear.Output.Shaft Speed)
)
{
	Ratio = Calculate.NAN();
	p = Value.Default.AsInteger();
	engineSpeedPrevious = Engine.Speed;
}
else if (Gear.Output.Shaft Speed <= 0.0)
{
	Ratio = Calculate.NAN();
	p = Value.Neutral.AsInteger();
	engineSpeedPrevious = Engine.Speed;
}
else
{
	if (speedUpdated)
	{
		/*
		 * use average speed since last update as transmission output is an average for this period
		 * gives a better estimate with sensors with low tooth counts
		 */
		Ratio = (Engine.Speed + engineSpeedPrevious) /
			(2.0 * Gear.Input.Ratio * Gear.Speed Sensor.Value);
		engineSpeedPrevious = Engine.Speed;
	}

	if (Calculate.Absolute(Ratio - Gear.Ratio.Lookup(Gear Enumeration.First)) < Tolerance)
	{
		p = Value.First.AsInteger();
	}
	else if (Calculate.Absolute(Ratio - Gear.Ratio.Lookup(Gear Enumeration.Second)) < Tolerance)
	{
		p = Value.Second.AsInteger();
	}
	else if (Calculate.Absolute(Ratio - Gear.Ratio.Lookup(Gear Enumeration.Third)) < Tolerance)
	{
		p = Value.Third.AsInteger();
	}
	else if (Calculate.Absolute(Ratio - Gear.Ratio.Lookup(Gear Enumeration.Fourth)) < Tolerance)
	{
		p = Value.Fourth.AsInteger();
	}
	else if (Calculate.Absolute(Ratio - Gear.Ratio.Lookup(Gear Enumeration.Fifth)) < Tolerance)
	{
		p = Value.Fifth.AsInteger();
	}
	else if (Calculate.Absolute(Ratio - Gear.Ratio.Lookup(Gear Enumeration.Sixth)) < Tolerance)
	{
		p = Value.Sixth.AsInteger();
	}
	else if (Gear.Neutral Switch eq Gear.Neutral Switch.On or Ratio > 10.0)
	{
		p = Value.Neutral.AsInteger();
	}
}

local stable = Calculate.Stable(p, This.Delay);

if (stable)
{
	if (Value.Validate(p))
	{
		Value.Set(p);
		if (stateStable)
		{
			State = State.OK;
		}
	}
	else
	{
		Value = Value.Default;
		State = State.Default;
	}
}
